<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Wed May 11 15:49:38 KST 2016-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="CommonDAO">
 	
	<select id="selectTargetList" parameterType="TargetVO" resultType="TargetVO">
	
			SELECT
				a.TARGET_NO, b.TARGET_TYPE_CD, b.SORT_ORDR, b.TARGET_CODE, a.REGIST_DTM
			FROM
				TB_TARGET a, TB_TARGET_DETAIL b
			WHERE
				a.TARGET_NO = #{targetNo}
			AND
				a.TARGET_NO = b.TARGET_NO
			AND
				a.DEL_YN = 'N'	
			ORDER BY b.SORT_ORDR
	
	</select>
	
	<insert id="insertTarget" useGeneratedKeys="true" keyProperty="targetNo" parameterType="TargetVO">
		
			INSERT INTO TB_TARGET
			(REGIST_DTM, DEL_YN)
			VALUES
			(SYSDATE(), 'N')	
		
	</insert>
	
	<insert id="insertTargetDetail" parameterType="TargetVO">
		
			INSERT INTO TB_TARGET_DETAIL
			( TARGET_NO, SORT_ORDR, TARGET_TYPE_CD, TARGET_CODE )
			VALUES
			( #{targetNo}, #{sortOrdr}, #{targetTypeCd}, #{targetCode} )	
		
	</insert>
	
	<select id="selectDisplayTargetList" parameterType="map" resultType="TargetVO">
	
			SELECT 		TB.TARGET_NO, TB.TARGET_TYPE_CD, TB.SORT_ORDR, TB.TARGET_CODE
							
				,
							
			(				 CASE WHEN TB.TARGET_TYPE_CD = 'ORG' THEN (SELECT OU FROM TB_ORG O WHERE O.OU_CODE = TB.TARGET_CODE)
									WHEN TB.TARGET_TYPE_CD = 'USER' THEN (SELECT DISPLAY_NAME FROM TB_USER U WHERE U.SID = TB.TARGET_CODE)
									WHEN TB.TARGET_TYPE_CD = 'GROUP' THEN (SELECT GROUP_NM FROM TB_GROUP G WHERE G.GROUP_NO = TB.TARGET_CODE)
							 END
			) AS DISP_NAME			
															 
				
				
			FROM
				TB_TARGET_DETAIL TB
			WHERE
				TB.TARGET_NO = #{targetNo}
			ORDER BY TB.SORT_ORDR
	
	</select>

	<!-- 우수 사용자 목록 조회 -->
	<select id="selectExcellenceUserList" parameterType="ExcellenceUserVO" resultType="ExcellenceUserVO">
		/* CommonDAO.selectExcellenceUserList */
		SELECT
			teu.*,
			(SELECT DISPLAY_NAME FROM TB_USER tu WHERE tu.SID = teu.SID) AS DISPLAY_NAME,
			(SELECT OU FROM TB_ORG tr WHERE tr.OU_CODE = (SELECT OU_CODE FROM TB_USER tu WHERE tu.SID = teu.SID)) AS OU
		FROM
			TB_EXCELLENCE_USER teu
		ORDER BY RKI
	</select>

	<!-- 우수 사용자 등록 -->
	<insert id="insertExcellenceUser" parameterType="ExcellenceUserVO">
		/* CommonDAO.insertExcellenceUser */
		INSERT INTO TB_EXCELLENCE_USER (SID, RKI, REGISTER_ID, REGIST_DTM, UPDATER_ID, UPD_DTM, MILEAGE_SCORE)
		VALUES (#{sid}, #{rki}, #{registerId}, SYSDATE(), #{registerId}, SYSDATE(), #{mileageScore})
	</insert>

	<!-- 우수 사용자 삭제 -->
	<delete id="deleteExcellenceUser" parameterType="ExcellenceUserVO">
		/* CommonDAO.deleteExcellenceUser */
		DELETE FROM TB_EXCELLENCE_USER
		<where>
			<if test="sid != null and sid !='' ">
				AND SID = #{sid}
			</if>
			<if test="rki != null and rki !='' ">
				AND RKI = #{rki}
			</if>
		</where>
	</delete>

	<!-- 우수 부서 목록 조회 -->
	<select id="selectExcellenceOrgList" parameterType="ExcellenceOrgVO" resultType="ExcellenceOrgVO">
	/* CommonDAO.selectExcellenceOrgList */
		SELECT
			teo.*,
			(SELECT OU FROM TB_ORG tr WHERE tr.OU_CODE = teo.OU_CODE) AS OU
		FROM
			TB_EXCELLENCE_ORG teo
		ORDER BY RKI
	</select>

	<!-- 우수 부서 등록 -->
	<insert id="insertExcellenceOrg" parameterType="ExcellenceOrgVO">
		/* CommonDAO.insertExcellenceOrg */
		INSERT INTO TB_EXCELLENCE_ORG (OU_CODE, RKI, REGISTER_ID, REGIST_DTM, UPDATER_ID, UPD_DTM, MILEAGE_SCORE)
		VALUES (#{ouCode}, #{rki}, #{registerId}, SYSDATE(), #{registerId}, SYSDATE(), #{mileageScore})
	</insert>

	<!-- 우수 부서 삭제 -->
	<delete id="deleteExcellenceOrg" parameterType="ExcellenceUserVO">
		/* CommonDAO.deleteExcellenceOrg */
		DELETE FROM TB_EXCELLENCE_ORG
		<where>
			<if test="ouCode != null and ouCode !='' ">
				AND OU_CODE = #{ouCode}
			</if>
			<if test="rki != null and rki !='' ">
				AND RKI = #{rki}
			</if>
		</where>
	</delete>

	<!-- 추천 지식 조회 -->
	<select id="selectRecommendList" resultType="RecommendVO">
		SELECT trk.*
			 , (SELECT SUMMRY FROM TB_KNOWLEDGE tk WHERE tk.TITLE = trk.TITLE ORDER BY KNOWLG_NO DESC LIMIT 1) AS SUMMRY
			 , (SELECT INQ_CNT FROM TB_KNOWLEDGE tk WHERE tk.TITLE = trk.TITLE ORDER BY KNOWLG_NO DESC LIMIT 1) AS INQ_CNT
			 , (SELECT COUNT(*) FROM TB_KNOWLEDGE_RECOMMEND tkr WHERE tkr.KNOWLG_NO = (SELECT KNOWLG_NO FROM TB_KNOWLEDGE tk WHERE tk.TITLE = trk.TITLE ORDER BY KNOWLG_NO DESC LIMIT 1)) AS RECOMEND_CNT
			 , (SELECT KNOWLG_NO FROM TB_KNOWLEDGE tk WHERE tk.TITLE = trk.TITLE AND tk.DEL_YN = 'N' ORDER BY KNOWLG_NO DESC LIMIT 1) AS KNOWLG_NO
		  FROM TB_RECOMMEND_KNOWLEDGE trk
		 ORDER BY RKI ASC,
		  CASE WHEN KNOWLG_MAP_TYPE = 'REPORT' THEN 1
			   WHEN KNOWLG_MAP_TYPE = 'REFERENCE' THEN 2
			   WHEN KNOWLG_MAP_TYPE = 'PERSONAL' THEN 3 END
	</select>
	
	<insert id="insertRecommend" parameterType="RecommendVO">
		
			INSERT INTO TB_RECOMMEND_KNOWLEDGE
			(KNOWLG_MAP_TYPE, RKI, TITLE, REGISTER_ID, REGIST_DTM, UPDATER_ID, UPD_DTM, DEL_YN)
			VALUES
			(#{knowlgMapType}, #{rki}, #{title}, #{registerId}, #{registDtm}, #{registerId}, SYSDATE(), 'N')
			
	</insert>
	
	<delete id="deleteRecommend" parameterType="RecommendVO">
		
			DELETE
			FROM
				TB_RECOMMEND_KNOWLEDGE
			<where>
				<if test="knowlgMapType != null and knowlgMapType !='' ">
				AND KNOWLG_MAP_TYPE = #{knowlgMapType}
				</if>
				<if test="rki != null and rki !='' ">
				AND RKI = #{rki}
				</if>
			</where>				
		
	</delete>

	<!-- 맞춤 지식 조회 -->
	<select id="selectPersonalizeList" parameterType="PersonalizeVO" resultType="PersonalizeVO">
		SELECT
			trk.*,
			(SELECT SUMMRY FROM TB_KNOWLEDGE tk WHERE tk.TITLE = trk.TITLE ORDER BY KNOWLG_NO DESC LIMIT 1) AS SUMMRY,
			(SELECT INQ_CNT FROM TB_KNOWLEDGE tk WHERE tk.TITLE = trk.TITLE ORDER BY KNOWLG_NO DESC LIMIT 1) AS INQ_CNT,
			(SELECT COUNT(*) FROM TB_KNOWLEDGE_RECOMMEND tkr WHERE tkr.KNOWLG_NO = (SELECT KNOWLG_NO FROM TB_KNOWLEDGE tk WHERE tk.TITLE = trk.TITLE ORDER BY KNOWLG_NO DESC LIMIT 1)) AS RECOMEND_CNT,
			(SELECT OU FROM TB_ORG tr WHERE tr.OU_CODE = trk.OU_CODE) AS OU,
			(SELECT KNOWLG_NO FROM TB_KNOWLEDGE tk WHERE tk.TITLE = trk.TITLE AND tk.DEL_YN = 'N' ORDER BY KNOWLG_NO DESC LIMIT 1) AS KNOWLG_NO
		FROM
			TB_PERSONALIZE_KNOWLEDGE trk
		<where>
			<if test="ouCode != null and ouCode !=''">
				AND trk.OU_CODE = #{ouCode}
			</if>
		</where>
		ORDER BY RKI ASC,
		  CASE WHEN KNOWLG_MAP_TYPE = 'REPORT' THEN 1
			   WHEN KNOWLG_MAP_TYPE = 'REFERENCE' THEN 2
			   WHEN KNOWLG_MAP_TYPE = 'PERSONAL' THEN 3 END
	</select>
	
	<insert id="insertPersonalize" parameterType="PersonalizeVO">
		
			INSERT INTO TB_PERSONALIZE_KNOWLEDGE
			(OU_CODE, KNOWLG_MAP_TYPE, RKI, TITLE, REGISTER_ID, REGIST_DTM, UPDATER_ID, UPD_DTM, DEL_YN)
			VALUES
			(#{ouCode}, #{knowlgMapType}, #{rki}, #{title}, #{registerId}, #{registDtm}, #{registerId}, SYSDATE(), 'N')
			
	</insert>
	
	<delete id="deletePersonalize" parameterType="PersonalizeVO">
		
			DELETE
			FROM
				TB_PERSONALIZE_KNOWLEDGE
			<where>
				<if test="ouCode != null and ouCode !='' ">
				AND OU_CODE = #{ouCode}
				</if>
				<if test="knowlgMapType != null and knowlgMapType !='' ">
				AND KNOWLG_MAP_TYPE = #{knowlgMapType}
				</if>
				<if test="rki != null and rki !='' ">
				AND RKI = #{rki}
				</if>
			</where>
		
	</delete>
	
	<select id="selectGroupList" parameterType="GroupVO" resultType="GroupVO">
	
			SELECT
				*
			FROM
				TB_GROUP
			<where>
				AND REGISTER_ID = #{registerId}
			</where>	
			
	</select>
	
	<select id="selectGroupDetail" parameterType="GroupVO" resultType="GroupVO">
			
			SELECT
				tgd.*,
				(SELECT OU FROM TB_USER tu WHERE tu.SID = tgd.TARGET_CODE) AS OU_CODE,
				( CASE WHEN tgd.TARGET_TYPE_CD = 'ORG' THEN (SELECT OU FROM TB_ORG tr WHERE tr.OU_CODE = tgd.TARGET_CODE)
				       WHEN tgd.TARGET_TYPE_CD = 'USER' THEN (SELECT DISPLAY_NAME FROM TB_USER tu WHERE tu.SID = tgd.TARGET_CODE)
				   END
				) AS TARGET_NAME
			FROM
				TB_GROUP_DETAIL tgd
			<where>
				AND REGISTER_ID = #{registerId}
				AND GROUP_NO = #{groupNo}
				AND DEL_YN = "N"
			</where>
	
	</select>
	
	<select id="selectGroupName" parameterType="long" resultType="String">
	
			SELECT
				GROUP_NM
			FROM
				TB_GROUP
			<where>
				AND GROUP_NO = #{groupNo}
			</where>
			
	</select>
	
	<select id="insertGroupCheck" parameterType="GroupVO" resultType="int">
 		
			SELECT 
				COUNT(*)
			FROM TB_GROUP 
			WHERE 
				GROUP_Nm = #{groupNm}
 		
 	</select>
	
	<insert id="insertGroup" useGeneratedKeys="true" keyProperty="groupNo" parameterType="GroupVO">
		
			INSERT INTO TB_GROUP
			(GROUP_NM, REGISTER_ID, REGIST_DTM, UPDATER_ID, UPD_DTM, DEL_YN)
			VALUES
			(#{groupNm}, #{registerId}, SYSDATE(), #{registerId}, SYSDATE(), 'N')
		
	</insert>
	
	<insert id="deleteGroup" parameterType="GroupVO">
		
			DELETE
			FROM
			TB_GROUP
			WHERE
				GROUP_NO = #{groupNo}
		
	</insert>
	
	<insert id="insertGroupDetail" parameterType="GroupVO">
	
			INSERT INTO TB_GROUP_DETAIL
			(GROUP_NO, SORT_ORDR, TARGET_TYPE_CD, TARGET_CODE, REGISTER_ID, REGIST_DTM, UPDATER_ID, UPD_DTM, DEL_YN)
			VALUES
			(#{groupNo}, #{sortOrdr}, #{targetTypeCd}, #{targetCode}, #{registerId}, SYSDATE(), #{registerId}, SYSDATE(), 'N')
			
	</insert>
	
	<select id="selectSortOrder" parameterType="UserVO" resultType="int">
	
			SELECT
				CASE WHEN MAX(SORT_ORDR) IS NOT NULL THEN MAX(SORT_ORDR)
				     WHEN MAX(SORT_ORDR) IS NULL THEN -1
				END AS SORT_ORDR
			FROM 
				TB_GROUP_DETAIL
			<where>
				<if test="groupNo != null and groupNo !=''">
				AND	GROUP_NO = #{groupNo}
				AND TARGET_TYPE_CD = #{targetTypeCd}
				</if>
			</where>
				
	</select>
	
	<delete id="deleteGroupDetail" parameterType="UserVO">
	
			DELETE
			FROM
				TB_GROUP_DETAIL
			<where>
				<if test="groupNo != null and groupNo !=''">
				AND GROUP_NO = #{groupNo}
				AND TARGET_CODE = #{targetCode}
				</if>
			</where>
			
	</delete>
	
	<select id="selectMileageScore" parameterType="UserVO" resultType="UserVO">
	
			SELECT
				IFNULL(SUM(MILEAGE_SCORE),0) AS MILEAGE_SCORE
			FROM 
				TB_USER_MILEAGE
			<where>
				<if test="sid != null and sid !=''">
				AND	SID = #{sid}
				</if>
			</where>
				
	</select>
	
	<update id="updateMyBG" parameterType="UserVO">
	
			UPDATE
				TB_USER
			SET
				ATCH_FILE_NO = #{atchFileNo}
			<where>
				<if test="sid != null and sid !=''">
				AND SID = #{sid}
				</if>
			</where>
			
	</update>
	
	<update id="deleteMyBG" parameterType="UserVO">
	
			UPDATE
				TB_USER
			SET
				ATCH_FILE_NO = NULL
			<where>
				<if test="sid != null and sid !=''">
				AND SID = #{sid}
				</if>
			</where>
			
	</update>

	<!-- 개인별 마일리지 점수 조회 -->
	<select id="selectTopMileageUserList" resultType="ExcellenceUserVO">
 		SELECT TB_USER_MILEAGE.SID
			 , TB_USER_MILEAGE.MILEAGE_SCORE
			 , TB_USER_MILEAGE.LAST_REGIST_DTM
		  FROM (SELECT TB_USER_MILEAGE.SID
					 , SUM(TB_USER_MILEAGE.MILEAGE_SCORE) AS MILEAGE_SCORE
					 , MAX(TB_USER_MILEAGE.REGIST_DTM) AS LAST_REGIST_DTM
				  FROM TB_USER_MILEAGE
				 WHERE TB_USER_MILEAGE.REGIST_DTM BETWEEN DATE_ADD(now(), INTERVAL -1 WEEK) AND now()
				 GROUP BY TB_USER_MILEAGE.SID) TB_USER_MILEAGE
		  LEFT JOIN TB_ROLE ON TB_ROLE.SID = TB_USER_MILEAGE.SID
		  LEFT JOIN TB_USER ON TB_USER.SID = TB_USER_MILEAGE.SID
		  LEFT JOIN TB_ORG ON TB_ORG.OU_CODE = TB_USER.OU_CODE
		 WHERE (TB_ROLE.ROLE_CD IS NULL OR TB_ROLE.ROLE_CD <![CDATA[<>]]> 'ROLE_ADMIN')
		   AND TB_ORG.OU_LEVEL <![CDATA[<>]]> 2
		 ORDER BY MILEAGE_SCORE DESC, LAST_REGIST_DTM ASC
		 LIMIT 30
 	</select>

	<!-- 부서별 마일리지 점수 조회 -->
 	<select id="selectTopMileageOrgList" resultType="ExcellenceOrgVO">
 		SELECT TB_ORG_MILEAGE.OU_CODE
			 , TB_ORG_MILEAGE.MILEAGE_SCORE
			 , TB_ORG_MILEAGE.LAST_REGIST_DTM
		  FROM (SELECT TB_ORG_MILEAGE.OU_CODE
					 , SUM(TB_ORG_MILEAGE.MILEAGE_SCORE) AS MILEAGE_SCORE
					 , MAX(TB_ORG_MILEAGE.REGIST_DTM) AS LAST_REGIST_DTM
				  FROM TB_ORG_MILEAGE
				 WHERE TB_ORG_MILEAGE.REGIST_DTM BETWEEN DATE_ADD(now(), INTERVAL -1 WEEK) AND now()
				 GROUP BY TB_ORG_MILEAGE.OU_CODE) TB_ORG_MILEAGE
		  LEFT JOIN TB_ORG ON TB_ORG.OU_CODE = TB_ORG_MILEAGE.OU_CODE
		 WHERE TB_ORG.OU_LEVEL <![CDATA[<>]]> 2
		 ORDER BY MILEAGE_SCORE DESC, LAST_REGIST_DTM ASC
		 LIMIT 30
 	</select>
 	
 	<select id="selectTopRecommendKnowledgeList" parameterType="RecommendVO" resultType="RecommendVO">
	
			SELECT
				TITLE
				, KNOWLG_MAP_TYPE
				, REGIST_DTM
				, REGISTER_ID
			FROM (
				SELECT
					tk.TITLE,
					tk.KNOWLG_MAP_TYPE,
					tk.REGIST_DTM,
					tk.REGISTER_ID,
					(tk.INQ_CNT * 1 + IFNULL((SELECT REC_CNT * 10 FROM (SELECT KNOWLG_NO, COUNT(*) AS REC_CNT FROM TB_KNOWLEDGE_RECOMMEND GROUP BY KNOWLG_NO) tkr WHERE tkr.KNOWLG_NO = tk.KNOWLG_NO),0)) AS POINT,
					ROW_NUMBER() OVER(PARTITION BY tk.TITLE ORDER BY tk.KNOWLG_NO DESC ) AS ROW_NUM
				FROM
					TB_KNOWLEDGE tk					
	       		WHERE DEL_YN = 'N'
	        	AND KNOWLG_NO != 0
	  	  		AND KNOWLG_MAP_TYPE = #{knowlgMapType}
	    		AND APRV_YN = 'Y'
	    		AND REGISTER_ID != 'admin' 
	    		ORDER BY POINT DESC
	   		) AS T
			WHERE ROW_NUM = 1
			LIMIT 2
			
	</select>
	
 	<select id="selectTopPersonalizeKnowledgeList" parameterType="PersonalizeVO" resultType="PersonalizeVO">
		WITH RECURSIVE TB_ORG_CTE AS (
			SELECT OU
				 , OU_CODE
				 , PARENT_OU_CODE
				 , 2 AS LEVEL
				 , OU_CODE AS TOP_OU_CODE
			  FROM TB_ORG
			 WHERE OU_LEVEL = 2
			 UNION ALL
			SELECT TB_ORG.OU
				 , TB_ORG.OU_CODE
				 , TB_ORG.PARENT_OU_CODE
				 , 1 + LEVEL AS LEVEL
				 , TB_ORG_CTE.TOP_OU_CODE
			  FROM TB_ORG
			 INNER JOIN TB_ORG_CTE ON TB_ORG_CTE.OU_CODE = TB_ORG.PARENT_OU_CODE
		)
		SELECT T.OU_CODE
			 , T.TITLE
			 , T.KNOWLG_MAP_TYPE
			 , T.REGIST_DTM
			 , T.REGISTER_ID
			 , T.POINT
		  FROM (SELECT tk.OU_CODE
					 , tk.TITLE
					 , tk.KNOWLG_MAP_TYPE
					 , tk.REGIST_DTM
					 , tk.REGISTER_ID
					 , (tk.INQ_CNT * 1 + IFNULL((SELECT REC_CNT * 10 FROM (SELECT KNOWLG_NO, COUNT(*) AS REC_CNT FROM TB_KNOWLEDGE_RECOMMEND GROUP BY KNOWLG_NO) tkr WHERE tkr.KNOWLG_NO = tk.KNOWLG_NO),0)) AS POINT
					 ,  ROW_NUMBER() OVER(PARTITION BY tk.TITLE ORDER BY tk.KNOWLG_NO DESC ) AS ROW_NUM
				  FROM TB_KNOWLEDGE tk
				 WHERE DEL_YN = 'N'
				   AND KNOWLG_NO != 0
				   AND KNOWLG_MAP_TYPE = #{knowlgMapType}
				   AND APRV_YN = 'Y'
				   AND REGISTER_ID != 'admin'
			 ) AS T
		 LEFT JOIN TB_ORG_CTE ON TB_ORG_CTE.OU_CODE = T.OU_CODE
		WHERE T.ROW_NUM = 1
		  AND TB_ORG_CTE.TOP_OU_CODE = #{ouCode}
		ORDER BY T.POINT DESC
		LIMIT 2
	</select>
	
</mapper>